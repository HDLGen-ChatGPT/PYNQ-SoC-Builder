-- Title Section Start
-- Generated by HDLGen, Github https://github.com/HDLGen-ChatGPT/HDLGen-ChatGPT, on 04-March-2024 at 15:30

-- Component Name : Untitled
-- Title          : To be Completed

-- Author(s)      : To be completed
-- Organisation   : To be completed
-- Email          : To be completed
-- Date           : 04/03/2024

-- Description
-- To be Completed

-- entity signal dictionary
-- clk      clk signal
-- rst      rst signal
-- loadDat  4-bit load data value
-- load     Assertion (H) synchronously loads count(3:0) register with loadDat(3:0), Load function does not 
--          require assertion of CE
-- ce       Chip Enable, synchronous count behavior (H) if low is deasserted
-- up       Assertion (H) / deassertion (L) enables count up/down behavior
-- count    Counter value, changes synchronously on active (rising) clk edge
-- TC       Terminal count, asserted (H) when in up counter mode (up=1) and count(3:0)=0xF 
--          or when in down counter mode (up=0) and count(3:0)=0
-- ceo      Chip enable output, asserted (H) when both ce and TC are asserted

-- internal signal dictionary
-- intTC    internal signal (same as TC)
-- NS       next and current state pair
-- CS       next and current state pair

-- Title Section End
-- library declarations
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.MainPackage.all;

-- entity declaration
entity Untitled is 
    Port(
        o_CS : out std_logic_vector(3 downto 0);
        o_NS : out std_logic_vector(3 downto 0);
        clk : in std_logic;
        rst : in std_logic;
        loadDat : in std_logic_vector(3 downto 0);
        load : in std_logic;
        ce : in std_logic;
        up : in std_logic;
        count : out std_logic_vector(3 downto 0);
        TC : out std_logic;
        ceo : out std_logic
    );
end entity Untitled;

architecture RTL of Untitled is
    -- Internal signal declarations
    signal intTC : std_logic;
    signal NS : std_logic_vector(3 downto 0);
    signal CS : std_logic_vector(3 downto 0);

begin
    o_CS <= CS
    o_NS <= NS

    NSDecode_i_p: process(loadDat,load,ce,up,CS)
    begin
        NS <= CS;  -- Default assignment 

        if load = '1' then
            NS <= loadDat;
        elsif ce = '1' then
            if up = '1' then 
                NS <= std_logic_vector(unsigned(CS) + 1);
            else 
                NS <= std_logic_vector(unsigned(CS) - 1);
            end if;
        end if;
    end process;

    OPDecode_intTC_p: process(up,CS)
    begin
        intTC <= '0';  -- Default assignment 

        if up = '1' and CS = "1111" then 
            intTC <= '1'; 
        elsif up = '0' and CS = "0000" then 
            intTC <= '1'; 
        end if;
    end process;

    asgnCount_c: count <= CS;

    OPDecode_asgnTC_c: TC <= intTC;

    OPDecode_ceo_c: ceo <= ce and intTC;

    stateReg_p: process(clk,rst)
    begin
        if rst = '1' then
            CS <= (others => '0');
        elsif rising_edge(clk) then
            if ce = '1' then -- enable register
                CS <= NS;
            end if;
        end if;
    end process;

end RTL;
